import datetime
import smtplib


class Roster:

    def __init__(self, name, week_start):
        self.name = name
        self.week_start = datetime.datetime.strptime(week_start, '%d/%m/%Y')
        if self.check_startweek(self.week_start):
            self.week_start = datetime.datetime.strptime(week_start, '%d/%m/%Y')
        else:
            raise Exception("Start week must be a Monday You entered: {} ".format(self.week_start.strftime('%A')))

        self.week_end = self.week_start + datetime.timedelta(days=6)
        #print('type: ', self.week_start + datetime.timedelta(days=7))
        # print('type: ', self.week_end.strftime('%A'))

        self.shifts = []

    def check_startweek(self, date):
        return isinstance(date, datetime.datetime) and self.week_start.strftime('%A') == "Monday"

    def get_week_start(self):
        #return self.week_start
        return self.week_start.strftime('%d/%m/%Y')

    def get_week_end(self):
        return self.week_end.strftime('%d/%m/%Y')

    def get_roster_name(self):
        return self.name

    def add_shift(self, shift):
        if isinstance(shift, Shift):
            self.shifts.append(shift)
        else:
            print('Error')

    def get_shifts(self):
        shifts = []
        for shift in self.shifts:
            shifts.append(shift)
        return shifts


class Employee:
    def __init__(self, name, email):
        self.name = name
        self.email = email

    def get_email(self):
        return self.email

    def get_name(self):
        return self.name

    def __repr__(self):
        return "Name: {} Email: {}".format(self.name, self.email)


class Shift:
    def __init__(self, date, start, end, employee):
        self.date = date
        self.start = start
        self.end = end
        if isinstance(employee, Employee):
            self.employee = employee
        else:
            raise Exception('Employee must be an employee object')

    def get_employee(self):
        return self.employee

    def get_start(self):
        return self.start

    def get_end(self):
        return self.end

    def get_date(self):
        return self.date

    def view(self):
        return self.date, self.start, self.end, self.employee.get_name()

    def __repr__(self):
        return "{} {} {} {}".format(self.date, self.start, self.end, self.employee.get_name())


def main():
    employees = []
    rosters = []
    while True:
        argument = input('Enter Command:').split(' ')

        if argument[0] == "help":
            print('Commands: \n add employee [name] [email] \n remove employee [name] \n view roster [week_start_date] \
                  \n email all roster [week_start]')
        elif argument[0] == "create" and argument[1] == "roster" and len(argument) == 4:
            name, date = argument[2:]
            week_roster = Roster(name, date)
            rosters.append(week_roster)
        elif argument[0] == "create" and argument[1] == "employee" and len(argument) == 4:
            name, email = argument[2:]
            new_employee = Employee(name, email)
            employees.append(new_employee)
        elif argument[0] == "add" and argument[1] == "shift" and len(argument) == 7:
            roster_name, date, start_time, end_time, staff_member = argument[2:]

            for employee in employees:
                if employee.get_name() == staff_member:
                    print(type(staff_member))
                    staff_member = employee
                    print(type(staff_member))

            new_shift = Shift(date, start_time, end_time, staff_member)
            for roster in rosters:
                if roster.get_roster_name() == roster_name:
                    roster.add_shift(new_shift)

        elif argument[0] == "email" and argument[1] == "roster" and argument[2] == "all" and len(argument) == 4:
            #roster_send = None
            for roster in rosters:
                if roster.get_roster_name() == argument[3]:
                    email_roster(roster)
                else:
                    print('Cannot find roster with that name')

        elif argument[0] == "test":
            week_roster = Roster("Test", "5/8/2019")
            rosters.append(week_roster)

            new_employee = Employee("Tom", "thomas.msampey@gmail.com")
            employees.append(new_employee)

            new_employee = Employee("bill", "thomas.msampey@gmail.com")
            employees.append(new_employee)

            new_shift = Shift("10/1/1990", "13:00", "14:00", employees[0])
            rosters[0].add_shift(new_shift)

            new_shift = Shift("11/1/1990", "14:00", "15:00", employees[1])
            rosters[0].add_shift(new_shift)

            new_shift = Shift("12/1/1990", "14:00", "15:00", employees[0])
            rosters[0].add_shift(new_shift)

            new_shift = Shift("12/1/1990", "14:00", "15:00", employees[1])
            rosters[0].add_shift(new_shift)

            email_roster(rosters[0])

        else:
            print('Invalid Command - type "help" for a list of commands')


def email_roster(roster):
    if isinstance(roster, Roster):
        if len(roster.get_shifts()) > 0:
            email_addresses = get_emails(roster)

            for emails in range(len(email_addresses)):
                server = smtplib.SMTP('SMTP.gmail.com', 587)
                server.ehlo()
                server.starttls()
                server.login(#enter email login here)
                subject = "Roster for {} starting date: {} ending date:{}".format(roster.get_roster_name(),
                                                                                roster.get_week_start(),
                                                                                roster.get_week_end())
                msg = "{}".format(format_roster(group_shifts(roster)))

                message = 'Subject: {} \n\n{}'.format(subject, msg)
                server.sendmail('thomas.msampey@gmail.com', email_addresses[emails], message)
                server.quit()

            print('Emails sent')
        else:
            print('This roster has no shifts to send')


def get_emails(roster):
    emails = []
    if isinstance(roster, Roster):
        shifts = roster.get_shifts()
        print(len(shifts))
        for email in shifts:
            if not email.get_employee().get_email() in emails:
                emails.append(email.get_employee().get_email())
        return emails
    else:
        raise Exception('Invalid Argument Type needs to be of type \'Roster\' you gave {}'.format(type(roster)))


def group_shifts(roster):
    employee_dict = {}

    if isinstance(roster, Roster):
        for shift in roster.get_shifts():
            name = shift.get_employee().get_name()
            employee_dict.setdefault(name, []).append(shift)

        return employee_dict
    else:
        raise Exception('Invalid Argument Type needs to be of type \'Roster\' you gave {}'.format(type(roster)))


def format_roster(employee_dictionary):
    print(type(employee_dictionary))
    if isinstance(employee_dictionary, dict):
        output = '\n'
        for key, values in employee_dictionary.items():
            output += "{}:\n".format(key)
            for shift in values:
                output += "{}: Start time: {} End time: {}".format(shift.get_date(), shift.get_start(), shift.get_end())
                output += '\n'
        return output
    else:
        raise Exception('Argument needs to be of type dict you gave {}'.format(type(employee_dictionary)))


if __name__ == '__main__':
    main()
